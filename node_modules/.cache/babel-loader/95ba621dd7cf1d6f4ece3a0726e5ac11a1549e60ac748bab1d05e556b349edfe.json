{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yogeshwaran Kumaran\\\\OneDrive\\\\Desktop\\\\test\\\\online-test\\\\src\\\\components\\\\ResultPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResultPage({\n  results\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null); // Store Chart instance\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n      chartInstanceRef.current = null;\n    }\n\n    // Create new chart\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Correct', 'Incorrect'],\n        datasets: [{\n          label: 'Answers',\n          data: [results.correct, results.total - results.correct],\n          backgroundColor: ['#28a745', '#dc3545']\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n\n    // Cleanup on unmount\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [results]); // Re-run when results change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", results.correct, \"/\", results.total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), results.cheatingLog.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Cheating Attempts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: results.cheatingLog.map((log, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [log.action, \" at \", log.timestamp]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(ResultPage, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = ResultPage;\nexport default ResultPage;\nvar _c;\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","ResultPage","results","_s","chartRef","chartInstanceRef","ctx","current","getContext","destroy","type","data","labels","datasets","label","correct","total","backgroundColor","options","scales","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","cheatingLog","length","map","log","idx","action","timestamp","_c","$RefreshReg$"],"sources":["C:/Users/Yogeshwaran Kumaran/OneDrive/Desktop/test/online-test/src/components/ResultPage.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction ResultPage({ results }) {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null); // Store Chart instance\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    // Destroy existing chart if it exists\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n      chartInstanceRef.current = null;\r\n    }\r\n\r\n    // Create new chart\r\n    chartInstanceRef.current = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ['Correct', 'Incorrect'],\r\n        datasets: [\r\n          {\r\n            label: 'Answers',\r\n            data: [results.correct, results.total - results.correct],\r\n            backgroundColor: ['#28a745', '#dc3545']\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        scales: {\r\n          y: { beginAtZero: true }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n        chartInstanceRef.current = null;\r\n      }\r\n    };\r\n  }, [results]); // Re-run when results change\r\n\r\n  return (\r\n    <div className=\"mt-5\">\r\n      <h2>Test Results</h2>\r\n      <p>\r\n        Score: {results.correct}/{results.total}\r\n      </p>\r\n      <canvas ref={chartRef} />\r\n      {results.cheatingLog.length > 0 && (\r\n        <div>\r\n          <h3>Cheating Attempts</h3>\r\n          <ul>\r\n            {results.cheatingLog.map((log, idx) => (\r\n              <li key={idx}>\r\n                {log.action} at {log.timestamp}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}